buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.github.triplet.gradle:play-publisher:2.3.0'
        classpath 'io.fabric.tools:gradle:1.29.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.github.triplet.play'
apply plugin: 'uk.org.ngo.gradle.whatsnew'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    // Android support libraries
    // Note: these libraries require the "Google Repository" and "Android
    //       Support Repository" to be installed via the SDK manager.
    implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-annotations:$rootProject.supportLibraryVersion"

    // Third party libraries
    implementation 'com.google.guava:guava:18.0'

    // findbugs is required for Proguard to work with Guava.
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // EventBus, https://github.com/greenrobot/EventBus.
    implementation 'de.greenrobot:eventbus:2.4.1'

    // Changelogs, see https://github.com/cketti/ckChangeLog.
    implementation 'de.cketti.library.changelog:ckchangelog:1.2.0'

    // Crashlytics.
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.7@aar') {
        transitive = true
    }

    // KitKat time picker
    implementation 'com.nineoldandroids:library:2.4.0'
    implementation project(':libs:datetimepicker')

    // JVM tests
    testImplementation 'junit:junit:4.12'
}

android {
    compileSdkVersion rootProject.compileSdkVersion

    def gitHash = "git rev-parse --short HEAD".execute().text.trim()
    def hasModifiedDeletedOrOtherFiles = !"git ls-files -mdo --exclude-standard".execute().text.trim().isEmpty()
    def hasStagedFiles = !"git diff-index --no-ext-diff --name-only --cached HEAD".execute().text.trim().isEmpty()
    def dirtyWorkingCopy = hasModifiedDeletedOrOtherFiles || hasStagedFiles
    def gitDescription = dirtyWorkingCopy ? "${gitHash}-dirty" : gitHash

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        buildConfigField "String", "GIT_DESCRIPTION", "\"${gitDescription}\""

        versionCode 63
        versionName "1.5.2-beta-2"

        vectorDrawables.useSupportLibrary = true
    }

    lintOptions {
        // Downgrade missing translations to non-fatal severity.
        warning 'MissingTranslation'
    }

    signingConfigs {
        if (project.hasProperty("Squeezer.properties")
                && file(project.property("Squeezer.properties")).exists()) {
            Properties props = new Properties()
            props.load(new FileInputStream(file(project.property("Squeezer.properties"))))
            release {
                storeFile file("keystore")
                storePassword props['key.store.password']
                keyAlias "squeezer"
                keyPassword props['key.alias.password']
            }
        } else {
            release {
                storeFile file("squeezer-local-release-key.keystore")
                storePassword "squeezer"
                keyAlias "squeezer"
                keyPassword "squeezer"
            }
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            // You could use 'proguardFile "proguard.cfg"' here and get the
            // same effect, but this ensures that any changes to
            // proguard-android-optimize.txt are automatically included.
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile "proguard-crashlytics.cfg"
            proguardFile "proguard-eventbus.cfg"
            proguardFile "proguard-guava.cfg"
            proguardFile "proguard-squeezer.cfg"
        }
    }
}

def publishTrack() {
    switch (android.defaultConfig.versionName) {
        case ~/.*-beta-\d+/:
            return 'beta'
        case ~/\d+\.\d+\.\d+/:
            return 'production'
    }
    throw new IllegalArgumentException("versionName '${versionName}' is not valid")
}

whatsnew {
    changelogPath = 'Squeezer/src/main/res/xml/changelog_master.xml'
    newsPath = 'NEWS'
    if (publishTrack() == 'beta') {
        whatsnewPath = 'Squeezer/src/main/play/release-notes/en-US/beta.txt'
    } else {
        whatsnewPath = 'Squeezer/src/main/play/release-notes/en-US/production.txt'
    }
}

play {
    serviceAccountCredentials = file('key.json')
    track = publishTrack()
}
